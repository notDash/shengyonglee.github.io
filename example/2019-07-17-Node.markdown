---
layout: default
title:  "Node入门 笔记"
date:   2019-07-15
---
# Node入门-一本全面的Node.js教程  笔记

---------------------------------------------------

### 什么是Node.js 

>服务端JavaScript: 
Node.js事实上就是另外一种上下文，它允许在后端（脱离浏览器环境）运行JavaScript代码。
要实现在后台运行JavaScript代码，代码需要先被解释然后正确的执行。Node.js的原理正是如此，它使用了Google的V8虚拟机（Google的Chrome浏览器使用的JavaScript执行环境），来解释和执行JavaScript代码。
除此之外，伴随着Node.js的还有许多有用的模块，它们可以简化很多重复的劳作，比如向终端输出字符串。
因此，Node.js事实上既是一个运行时环境，同时又是一个库。

### 一个完整的基于Node.js的web应用

>需求： 
实现图片的选择、上传。并把图片信息保存到数据库当中。

** 需求分析：**
为了实现以上的需求，我们需要实现的部分

- 我们需要提供Web页面，因此需要一个HTTP服务器
- 对于不同的请求，根据请求的URL，我们的服务器需要给予不同的响应，因此我们需要一个路由，用于把请求对应到请求处理程序（request handler）
- 当请求被服务器接收并通过路由传递之后，需要可以对其进行处理，因此我们需要最终的请求处理程序
- 路由还应该能处理POST数据，并且把数据封装成更友好的格式传递给请求处理入程序，因此需要请求数据处理功能
- 我们不仅仅要处理URL对应的请求，还要把内容显示出来，这意味着我们需要一些视图逻辑供请求处理程序使用，以便将内容发送给用户的浏览器
- 用户需要上传图片，所以我们需要上传处理功能来处理这方面的细节
- 我们还需要数据库模块来连接数据库

#### 构建应用的模块
#### 一个基础的HTTP服务器
1. 创建一个入口文件index.js以及一个服务启动模块文件server.js

server.js，一个可以工作的HTTP服务器
```
const http = require("http");  // require node自带的模块
// 调用http模块提供的函数： createServer 。这个函数会返回一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数，指定这个HTTP服务器监听的端口号。
http.createServer(function(request, response) {
  response.writeHead(200, {"Content-Type": "text/plain"});
  response.write("Hello World");
  response.end();
}).listen(8888);
```
启动： node server.js

